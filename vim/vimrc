set nocompatible              " be iMproved, required
filetype off                  " required
call plug#begin('~/.vim/plugged')
Plug 'tikhomirov/vim-glsl'
Plug 'alvan/vim-closetag'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'nelstrom/vim-visual-star-search'
Plug 'rhysd/vim-clang-format'
Plug 'bronson/vim-trailing-whitespace'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'ludovicchabant/vim-gutentags'
Plug 'embear/vim-localvimrc'
Plug 'nfvs/vim-perforce'
Plug 'airblade/vim-rooter'
Plug 'beyondmarc/hlsl.vim'
Plug 'prabirshrestha/async.vim'
Plug 'prabirshrestha/vim-lsp'
" All of your Plugs must be added before the following line
call plug#end()            " required
""""""""""Vim config""""""""""
set autoread
set ignorecase
set wildignorecase
set smartcase
" Plays nicer with fzf than autochdir
autocmd BufEnter * silent! lcd %:p:h
set autochdir
:autocmd VimResized * wincmd =
syntax on
colorscheme ez
set cursorline
filetype plugin indent on    " required
filetype plugin on
"makes backspace work like most other apps
set backspace=indent,eol,start
"Set color for column 80th
set cc=80
set encoding=utf-8
set expandtab
"Enable switching between tabs without saving
set foldmethod=manual
set guicursor+=a:blinkon0
set hidden
set history=1000
set list
set listchars=tab:\ \ >,space:\.,extends:>
set incsearch
set notimeout
set nowrap
" Show line, column number
set ruler
"identation tab
set shiftwidth=2
"makes the backspace key treat the spaces like a tab
set softtabstop=2
set tabstop=2
set viminfo='1000,<1000,:1000,s10,h
set belloff=all
set wildcharm=<Tab>
set wildmenu
set wildmode=longest:full,full
"mac has to be before unix
if has("win32") || has("mac")
    set clipboard=unnamed
elseif has("unix")
    set clipboard=unnamedplus
endif
"window default size
if has('gui_running')
    set lines=999
    set columns=999
endif
"Color scheme
if has("unix")
    set t_8f=[38;2;%lu;%lu;%lum
    set t_8b=[48;2;%lu;%lu;%lum
endif

"set gui font
if has('gui_running')
    "mac has to be before unix
    if has("win32")
        set guifont=Consolas:h12:cANSI
    elseif has("mac")
        set guifont=Menlo:h12
    elseif has("unix")
        set guifont=DejaVu\ Sans\ Mono\ 12
    endif
    set guioptions-=L
    set guioptions-=m
    set guioptions-=r
    set guioptions-=T
endif

set laststatus=2
set statusline=(%t)
set statusline+=\ (%{&ff})
set statusline+=\ (%F)
set statusline+=\ (%Y)
set statusline+=\ (%c\ %l\/%L)

" See vim.py
" // to make vim use absolute paths
set backupdir-=.
if has("win32")
  set directory=~/vimfiles/swap//
  set backupdir^=~/vimfiles/backup//
else
  set directory=~/.vim/swap//
  set backupdir^=~/.vim/backup//
endif

set tags=./tags;

if filereadable(expand("~/local.vimrc"))
  source ~/local.vimrc
endif
" Shortcuts
" Press Space to turn off highlighting and clear any message already displayed.
" noremap <Space> :set hlsearch! hlsearch?<CR>
"map Ctrl-S to save
nnoremap <silent> <C-s> :update!<CR>
vnoremap <silent> <C-s> <C-c>:update!<CR>
inoremap <silent> <C-s> <C-o>:update!<CR>
"Set Leader key
let mapleader="\<Space>"
noremap <leader>h <C-W>h
noremap <leader>j <C-W>j
noremap <leader>k <C-W>k
noremap <leader>l <C-W>l
noremap <leader>wc :close<CR>
noremap <leader>wo :only<CR>
noremap <leader>wv :vs<CR>
noremap <leader>wh :sp<CR>
noremap <leader>wd :bd<CR>
noremap <leader>bd :bp\|bd #<CR>
" Switch to most recent buffer
nnoremap <silent> <leader>o :b#<CR>
vnoremap <silent> <leader>o <C-c>:b#<CR>
"Quickfix
nnoremap <silent> <leader>ln :cn<CR>
vnoremap <silent> <leader>ln <C-c>:cn<CR>
nnoremap <silent> <leader>lp :cp<CR>
vnoremap <silent> <leader>lp <C-c>:cp<CR>
" Preserve cursor position when switching between buffers.
" https://stackoverflow.com/questions/4251533/vim-keep-window-position-when-switching-buffers
if v:version >= 700
    au BufLeave * let b:winview = winsaveview()
    au BufEnter * if(exists('b:winview')) | call winrestview(b:winview) | endif
endif
autocmd FileType gn noremap <Leader>f :py3f ~/myconfig/vim/gn-format.py<CR>
" Copy path to clipboard
" filename
noremap <leader>nn :let @+ = expand("%:t") \| echo @+ . " Copied to clipboard"<CR>
" full path
noremap <leader>nf :let @+ = expand("%:p") \| echo @+ . " Copied to clipboard"<CR>

" Perfocrce commands.
command P4e silent execute "!start p4 edit %"
command P4d silent execute "!start p4 diff -f %"

""""""""""A""""""""""
let g:alternateNoDefaultAlternate = 1
nnoremap <silent> <leader>s :FastSwitch<CR>
vnoremap <silent> <leader>s <C-c>:FastSwitch<CR>

""""""""""vim-clang-format""""""""""
autocmd FileType c,cpp,objc,objcpp vnoremap <buffer><Leader>f :ClangFormat<CR>

""""""""""fzf""""""""""
let $FZF_DEFAULT_COMMAND = 'rg --no-ignore --files --hidden -g "!.git" '
nnoremap <leader>p<Space> :GFiles<CR>
vnoremap <leader>p<Space> <C-c>:GFiles<CR>
nnoremap <leader>e :Files .<CR>
vnoremap <leader>e <C-c>:Files .<CR>
nnoremap <leader>; :Buffers<CR>
vnoremap <leader>; <C-c>:Buffers<CR>
nnoremap <leader>r :History<CR>
vnoremap <leader>r <C-c>:History<CR>
" Find tags of current word
nnoremap <leader>tw :Tags <C-r><C-w><CR>
vnoremap <leader>tw <C-c>:Tags <C-r><C-w><CR>

nnoremap <leader>pr :execute "Files" FindRootDirectory()<CR>
vnoremap <leader>pr <C-c>:execute "Files" FindRootDirectory()<CR>

let g:fzf_preview_window = ''
let g:fzf_colors =
    \ { 'fg': ['fg', 'Normal'],
    \ 'bg': ['bg', 'Normal'],
    \ 'hl': ['fg', 'String'],
    \ 'fg+': ['bg', 'Normal'],
    \ 'bg+': ['fg', 'Normal'],
    \ 'hl+': ['fg', 'String'],
    \ }
let g:fzf_layout = { 'down': '40%' }
command! -nargs=* Rg
    \ call fzf#vim#grep(
    \ 'rg --no-ignore --hidden --column --line-number --no-heading --smart-case --color=always ' . <q-args>,
    \ 1,
    \ {'options': fzf#vim#with_preview()["options"] + ['--bind', 'ctrl-a:select-all,ctrl-d:deselect-all']},
    \ 0)

function s:RgFromRoot(params)
    call fzf#vim#grep(
        \ 'rg --hidden --column --line-number --no-heading --smart-case --color=always ' . a:params,
        \ 1,
        \ {'dir': FindRootDirectory()},
        \ 0)
endfunction

command! -nargs=* Rb call fzf#vim#files(system('git rev-parse --show-toplevel')[:-2])
command! -nargs=* Rgg call s:RgFromRoot(<q-args>)
command! -nargs=* Rgc call s:RgFromRoot('-t cpp ' . <q-args>)
command! -nargs=* Rgcs call s:RgFromRoot('-t cs ' . <q-args>)
command! -nargs=* Rgl call s:RgFromRoot('--no-ignore -t lua ' . <q-args>)
command! -nargs=* Rggn call s:RgFromRoot('-t gn ' . <q-args>)

""""""""""fugitive""""""""""
nnoremap <leader>vd :Gdiff<CR>
vnoremap <leader>vd <C-c>:Gdiff<CR>
nnoremap <leader>va :Gw<CR>
vnoremap <leader>va <C-c>:Gw<CR>
nnoremap <leader>vs :Gstatus<CR>
vnoremap <leader>vs <C-c>:Gstatus<CR>
nnoremap <leader>vc :Gcommit<CR>
vnoremap <leader>vc <C-c>:Gcommit<CR>
nnoremap <leader>vp :Gpush<CR>
vnoremap <leader>vp <C-c>:Gpush<CR>
nnoremap <leader>vf :Gpull<CR>
vnoremap <leader>vf <C-c>:Gpull<CR>

""""""""""vim-commentary""""""""""
vnoremap <leader>c :Commentary<CR>
autocmd FileType c,cpp,cs,java setlocal commentstring=//\ %s

""""""""""vim-localvimrc""""""""""
let g:localvimrc_persistent=2
let g:localvimrc_event = "BufEnter"

""""""""""vim-rooter""""""""""
" We only use vim-rooter to get the root dir for fzf
let g:rooter_manual_only = 1

""""""""""vim-gutentags""""""""""
let g:gutentags_project_root = ['.lvimrc', '.gutctags']
let g:gutentags_add_default_project_roots = 0

""""""""""vim-lsp""""""""""
function! Find_root_uri(server_name) abort
  return FindRootDirectory()
endfunction

let g:lsp_preview_float = 0
let g:lsp_log_verbose = 1
let g:lsp_log_file = expand('~/vim-lsp.log')
let g:lsp_diagnostics_echo_cursor = 1
let g:lsp_diagnostics_echo_delay = 50
let g:lsp_signature_help_enabled = 0

if executable('clangd')
    augroup lsp_clangd
        autocmd!
        autocmd User lsp_setup call lsp#register_server({
                    \ 'name': 'clangd',
                    \ 'cmd': {server_info->['clangd']},
                    \ 'whitelist': ['c', 'cpp', 'objc', 'objcpp'],
                    \ 'root_uri': function('Find_root_uri'),
                    \ })
    augroup end
endif
