set nocompatible              " be iMproved, required
filetype off                  " required
call plug#begin('~/.vim/plugged')
Plug 'tikhomirov/vim-glsl'
Plug 'alvan/vim-closetag'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'nelstrom/vim-visual-star-search'
Plug 'rhysd/vim-clang-format'
Plug 'bronson/vim-trailing-whitespace'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'ludovicchabant/vim-gutentags'
Plug 'embear/vim-localvimrc'
Plug 'editorconfig/editorconfig-vim'
" All of your Plugs must be added before the following line
call plug#end()            " required
""""""""""Vim config""""""""""
set autoread
set ignorecase
set wildignorecase
set smartcase
" Plays nicer with fzf than autochdir
autocmd BufEnter * silent! lcd %:p:h
:autocmd VimResized * wincmd =
syntax on
" Sync these colors with emacs and bash.
if strftime("%H") >= 8 && strftime("%H") < 19
    set background=light
else
    set background=dark
endif
colorscheme ez
set cursorline
filetype plugin indent on    " required
filetype plugin on
"makes backspace work like most other apps
set backspace=indent,eol,start
"Set color for column 80th
set cc=80
set encoding=utf-8
set expandtab
"Enable switching between tabs without saving
set foldmethod=manual
set guicursor+=a:blinkon0
set hidden
set history=1000
set incsearch
set notimeout
" Show line, column number
set ruler
"identation tab
set shiftwidth=2
"makes the backspace key treat the spaces like a tab
set softtabstop=2
set tabstop=2
set viminfo='1000,<1000,:1000,s10,h
set belloff=all
set wildcharm=<Tab>
set wildmenu
set wildmode=longest:full,full
"mac has to be before unix
if has("win32") || has("mac")
    set clipboard=unnamed
elseif has("unix")
    set clipboard=unnamedplus
endif
"window default size
if has('gui_running')
    set columns=100
endif
"Color scheme
if has("unix")
    set t_8f=[38;2;%lu;%lu;%lum
    set t_8b=[48;2;%lu;%lu;%lum
endif

"set gui font
if has('gui_running')
    "mac has to be before unix
    if has("win32")
        set guifont=Consolas:h12:cANSI
    elseif has("mac")
        set guifont=Menlo:h12
    elseif has("unix")
        set guifont=DejaVu\ Sans\ Mono\ 12
    endif
    set guioptions-=L
    set guioptions-=m
    set guioptions-=r
    set guioptions-=T
endif

set laststatus=2
set statusline=(%t)
set statusline+=\ (%{&ff})
set statusline+=\ (%F)
set statusline+=\ (%Y)
set statusline+=\ (%l:%c)

" See vim.py
" // to make vim use absolute paths
if has("win32")
  set directory=~/vimfiles/swap//
else
  set directory=~/.vim/swap//
endif

set tags=./tags;
" Shortcuts
" Press Space to turn off highlighting and clear any message already displayed.
" noremap <Space> :set hlsearch! hlsearch?<CR>
"map Ctrl-S to save
nnoremap <silent> <C-s> :update<CR>
vnoremap <silent> <C-s> <C-c>:update<CR>
inoremap <silent> <C-s> <C-o>:update<CR>
"Set Leader key
let mapleader="\<Space>"
noremap <leader>h <C-W>h
noremap <leader>j <C-W>j
noremap <leader>k <C-W>k
noremap <leader>l <C-W>l
noremap <leader>wc :close<CR>
noremap <leader>wo :only<CR>
noremap <leader>wv :vs<CR>
noremap <leader>wh :sp<CR>
noremap <leader>bd :bp\|bd #<CR>
" Switch to most recent buffer
nnoremap <silent> <leader>o :b#<CR>
vnoremap <silent> <leader>o <C-c>:b#<CR>
" Preserve cursor position when switching between buffers.
" https://stackoverflow.com/questions/4251533/vim-keep-window-position-when-switching-buffers
if v:version >= 700
    au BufLeave * let b:winview = winsaveview()
    au BufEnter * if(exists('b:winview')) | call winrestview(b:winview) | endif
endif
autocmd FileType gn noremap <Leader>f :py3f ~/myconfig/vim/gn-format.py<CR>

" Perfocrce commands.
command P4e execute "!start p4 edit %"
command P4d execute "!start p4 diff %"

""""""""""A""""""""""
let g:alternateNoDefaultAlternate = 1
nnoremap <silent> <leader>s :FastSwitch<CR>
vnoremap <silent> <leader>s <C-c>:FastSwitch<CR>

""""""""""vim-clang-format""""""""""
autocmd FileType c,cpp,objc,objcpp vnoremap <buffer><Leader>f :ClangFormat<CR>

""""""""""fzf""""""""""
nnoremap <leader>p<Space> :GFiles<CR>
vnoremap <leader>p<Space> <C-c>:GFiles<CR>
nnoremap <leader>e :Files .<CR>
vnoremap <leader>e <C-c>:Files .<CR>
nnoremap <leader>; :Buffers<CR>
vnoremap <leader>; <C-c>:Buffers<CR>
nnoremap <leader>r :History<CR>
vnoremap <leader>r <C-c>:History<CR>
let g:fzf_colors =
    \ { 'fg': ['fg', 'Normal'],
    \ 'bg': ['bg', 'Normal'],
    \ 'hl': ['hl', 'Search'],
    \ 'fg+': ['fg', 'Normal'],
    \ 'bg+': ['bg', 'CursorLine'],
    \ 'hl+': ['hl', 'Search']}
command! -nargs=* Rg
    \ call fzf#vim#grep(
    \ 'rg --column --line-number --no-heading --smart-case --color=always ' . <q-args>,
    \ 1,
    \ 0)

command! -nargs=* Rgg
    \ call fzf#vim#grep(
    \ 'rg --column --line-number --no-heading --smart-case --color=always ' . <q-args>,
    \ 1,
    \ {'dir': system('git rev-parse --show-toplevel')[:-2]},
    \ 0)

""""""""""fugitive""""""""""
nnoremap <leader>vd :Gdiff<CR>
vnoremap <leader>vd <C-c>:Gdiff<CR>
nnoremap <leader>va :Gw<CR>
vnoremap <leader>va <C-c>:Gw<CR>
nnoremap <leader>vs :Gstatus<CR>
vnoremap <leader>vs <C-c>:Gstatus<CR>
nnoremap <leader>vc :Gcommit<CR>
vnoremap <leader>vc <C-c>:Gcommit<CR>
nnoremap <leader>vp :Gpush<CR>
vnoremap <leader>vp <C-c>:Gpush<CR>
nnoremap <leader>vf :Gpull<CR>
vnoremap <leader>vf <C-c>:Gpull<CR>

""""""""""vim-commentary""""""""""
vnoremap <leader>c :Commentary<CR>
autocmd FileType c,cpp,cs,java setlocal commentstring=//\ %s

""""""""""vim-localvimrc""""""""""
let g:localvimrc_persistent=2
